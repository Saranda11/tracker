name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"
  MONGODB_URI: mongodb://localhost:27017/expense-tracker
  JWT_SECRET: test-secret-key-for-ci

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping:1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: api/package-lock.json

      - name: Install backend dependencies
        run: |
          cd api
          npm ci

      - name: Run backend linting
        run: |
          cd api
          npm run lint --if-present

      - name: Run backend tests
        run: |
          cd api
          npm test
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ env.MONGODB_URI }}
          JWT_SECRET: ${{ env.JWT_SECRET }}

      - name: Generate backend coverage report
        run: |
          cd api
          npm run test:coverage --if-present

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: front/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd front
          npm ci

      - name: Run frontend linting
        run: |
          cd front
          npm run lint

      - name: Run TypeScript check
        run: |
          cd front
          npm run type-check

      - name: Run frontend tests
        run: |
          cd front
          npm test --if-present

      - name: Build frontend
        run: |
          cd front
          npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5000/api

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping:1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd api && npm ci
          cd ../front && npm ci

      - name: Start backend server
        run: |
          cd api
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ env.MONGODB_URI }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          PORT: 5000

      - name: Seed test data
        run: |
          cd api
          npm run seed

      - name: Run integration tests
        run: |
          cd api
          npm run test:integration --if-present

      - name: Test API health
        run: |
          curl -f http://localhost:5000/health || exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd api && npm ci
          cd ../front && npm ci

      - name: Run security audit (backend)
        run: |
          cd api
          npm audit --audit-level=high

      - name: Run security audit (frontend)
        run: |
          cd front
          npm audit --audit-level=high

      - name: Check for outdated packages
        run: |
          cd api && npm outdated || true
          cd ../front && npm outdated || true

  build-and-test-docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping:1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: expense-tracker:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --name test-container -d \
            -e MONGODB_URI=mongodb://localhost:27017/expense-tracker-test \
            -e JWT_SECRET=test-secret \
            -e NODE_ENV=test \
            -e PORT=5000 \
            --network host \
            expense-tracker:test

          # Wait for container to start
          sleep 30

          # Test health endpoint
          curl -f http://localhost:5000/health || exit 1

          # Cleanup
          docker stop test-container
          docker rm test-container

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd api && npm ci
          cd ../front && npm ci

      - name: Run code complexity analysis
        run: |
          npx complexity-report --output json api/src/ > complexity-report.json || true

      - name: Check code formatting
        run: |
          cd front
          npx prettier --check . || true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, build-and-test-docker]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: deploy to staging server, update docker images, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, build-and-test-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: deploy to production server, update docker images, etc.

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Pipeline completed successfully!"
          # Add notification logic (Slack, Discord, Email, etc.)

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Pipeline failed!"
          # Add failure notification logic
